name: Build Dashboard
on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours
  workflow_dispatch:

permissions:
  contents: write  # needed to push to gh-pages

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages  # If gh-pages doesn't exist, create it or handle that logic

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/githubcli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Auth with GitHub CLI using PAT
        run: echo "${{ secrets.AGGREGATOR_PAT }}" | gh auth login --with-token

      - name: Fetch deployment data
        id: fetch_data
        run: |
          # If the repos.txt file doesn't exist or is empty, exit early.
          if [ ! -s repos.txt ]; then
            echo "repos.txt is empty or missing!"
            exit 1
          fi

          ALL_DATA='[]'  # Start as an empty JSON array

          # Process each repository listed in repos.txt
          while read REPO; do
            echo "Fetching data from $REPO..."

            # Fetch the DEPLOYMENT_STATUS_JSON variable from the repository
            CURRENT_JSON=$(gh api \
              repos/$REPO/actions/variables/DEPLOYMENT_STATUS_JSON \
              --jq '.value' 2>/dev/null || echo '{}')

            echo "Raw JSON from $REPO: $CURRENT_JSON"

            # Validate and sanitise the JSON
            CURRENT_JSON=$(echo "$CURRENT_JSON" | jq '.' 2>/dev/null || echo '{}')

            echo "Sanitised JSON for $REPO: $CURRENT_JSON"

            # Add the repository and its sanitised data to the aggregated data
            ALL_DATA=$(echo "$ALL_DATA" | jq --arg r "$REPO" --argjson c "$CURRENT_JSON" '
              . + [ { "repo": $r, "status": $c } ]
            ')
          done < repos.txt

          echo "Aggregated data: $ALL_DATA"

          # Write ALL_DATA to a file to ensure proper handling
          echo "$ALL_DATA" > all_data.json
          echo "allJson<<EOF" >> $GITHUB_OUTPUT
          cat all_data.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug Sanitised ALL_JSON
        run: |
          echo "Sanitised ALL_JSON from file:"
          cat all_data.json | jq '.'

      - name: Generate index.html
        run: |
          # Read ALL_JSON from file
          ALL_JSON=$(cat all_data.json)

          # Start building the HTML
          echo '<!DOCTYPE html>' > index.html
          echo '<html lang="en">' >> index.html
          echo '<head>' >> index.html
          echo '  <meta charset="UTF-8">' >> index.html
          echo '  <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> index.html
          echo '  <title>Deployment Dashboard</title>' >> index.html
          echo '  <link rel="stylesheet" href="styles.css">' >> index.html
          echo '</head>' >> index.html
          echo '<body>' >> index.html

          echo '  <h1>Deployment Dashboard</h1>' >> index.html

          # Section A: Most Recent Deployments
          echo '  <h2>Most Recent Deployments</h2>' >> index.html
          echo '  <table>' >> index.html
          echo '    <thead>' >> index.html
          echo '      <tr>' >> index.html
          echo '        <th class="center">Repository</th>' >> index.html
          echo '        <th class="center">Environment</th>' >> index.html
          echo '        <th class="center">Latest Release</th>' >> index.html
          echo '        <th class="center">Last Deployed Date</th>' >> index.html
          echo '        <th class="center">Status</th>' >> index.html
          echo '      </tr>' >> index.html
          echo '    </thead>' >> index.html
          echo '    <tbody>' >> index.html

          echo "$ALL_JSON" | jq -c '.[]' | while read -r item; do
            REPO=$(echo "$item" | jq -r '.repo')
            ENV_NAME=$(echo "$item" | jq -r '.status.ProjectName[0].ProcessName[0].ENV_NAME // "N/A"')
            MOST_RECENT=$(echo "$item" | jq -r '.status.ProjectName[0].ProcessName[0].MostRecentDeploy // "N/A"')
            MOST_RECENT_DATE=$(echo "$item" | jq -r '.status.ProjectName[0].ProcessName[0].MostRecentDeployDate // "N/A"')
            MOST_RECENT_STATUS=$(echo "$item" | jq -r '.status.ProjectName[0].ProcessName[0].MostRecentDeployStatus // "N/A"')

            echo '      <tr>' >> index.html
            echo "        <td><a class='repo-title' href='https://github.com/$REPO' target='_blank'>$REPO</a></td>" >> index.html
            echo "        <td>$ENV_NAME</td>" >> index.html
            echo "        <td>$MOST_RECENT</td>" >> index.html
            echo "        <td>$MOST_RECENT_DATE</td>" >> index.html
            echo "        <td>$MOST_RECENT_STATUS</td>" >> index.html
            echo '      </tr>' >> index.html
          done

          echo '    </tbody>' >> index.html
          echo '  </table>' >> index.html

          # Section B: Full Deployment History
          echo '  <h2>Full Deployment History</h2>' >> index.html

          echo "$ALL_JSON" | jq -c '.[]' | while read -r item; do
            REPO=$(echo "$item" | jq -r '.repo')
            ENV_NAME=$(echo "$item" | jq -r '.status.ProjectName[0].ProcessName[0].ENV_NAME // "N/A"')
            echo "  <h3>History for <a class='repo-title' href='https://github.com/$REPO' target='_blank'>$REPO</a> ($ENV_NAME)</h3>" >> index.html

            HISTORY=$(echo "$item" | jq -c '.status.ProjectName[0].ProcessName[0].DeploymentHistory // []')

            echo '  <table>' >> index.html
            echo '    <thead>' >> index.html
            echo '      <tr>' >> index.html
            echo '        <th class="center">Release</th>' >> index.html
            echo '        <th class="center">Status</th>' >> index.html
            echo '        <th class="center">Date</th>' >> index.html
            echo '      </tr>' >> index.html
            echo '    </thead>' >> index.html
            echo '    <tbody>' >> index.html

            echo "$HISTORY" | jq -c '.[]' | while read -r hItem; do
              REL=$(echo "$hItem" | jq -r '.DeployRelease // "N/A"')
              OUT=$(echo "$hItem" | jq -r '.OutcomeStatus // "N/A"')
              DT=$(echo "$hItem" | jq -r '.DeployDate // "N/A"')

              echo '      <tr>' >> index.html
              echo "        <td>$REL</td>" >> index.html
              echo "        <td>$OUT</td>" >> index.html
              echo "        <td>$DT</td>" >> index.html
              echo '      </tr>' >> index.html
            done

            echo '    </tbody>' >> index.html
            echo '  </table>' >> index.html
          done

          echo '</body>' >> index.html
          echo '</html>' >> index.html

      - name: Commit and push to gh-pages
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add index.html
          git commit -m "Update dashboard with improved design" || echo "No changes to commit"
          git push origin gh-pages
